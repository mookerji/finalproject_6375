#=========================================================================
# Trace-bsv.pl Config File
#

package settings;

#--------------------------------------------------------------------
# Trace Tags
#--------------------------------------------------------------------

$base = "mkCoreTH_wrapper.coreTH";

# This should be a hash of tags to what should be displayed if the 
# tag is not present on a given cycle. The tags correspond to the
# trace tags used in the BSV source code.

%fields =
(

  "mkProc:pc"                    => "        ",
  "mkProc:pcgen"                 => " ",
  "mkProc:exec"                  => " ",
  "mkProc:writeback"             => " ",
  "mkProc:exInstFull"            => "                     ",

  "mkInstCacheBlocking:reqTiny"  => "    ",
  "mkInstCacheBlocking:respTiny" => "    ",
  "mkInstCacheBlocking:stage"    => "    ",
  "mkInstCacheBlocking:hitMiss"  => " ",

  "mkDataCacheBlocking:reqTiny"  => "    ",
  "mkDataCacheBlocking:respTiny" => "    ",
  "mkDataCacheBlocking:stage"    => "    ",
  "mkDataCacheBlocking:hitMiss"  => " ",

  "mkMemArb:req0"                => "    ",
  "mkMemArb:req1"                => "    ",
  "mkMemArb:resp"                => "    ",

);

%headers =
(

  "mkProc:pc"                    => "pc      ",
  "mkProc:pcgen"                 => "stage",
  "mkProc:exec"                  => "",
  "mkProc:writeback"             => "",
  "mkProc:exInstFull"            => "exInst ",

  "mkInstCacheBlocking:reqTiny"  => "req",
  "mkInstCacheBlocking:respTiny" => "resp",
  "mkInstCacheBlocking:stage"    => "stage",
  "mkInstCacheBlocking:hitMiss"  => "hit/miss",

  "mkDataCacheBlocking:reqTiny"  => "req",
  "mkDataCacheBlocking:respTiny" => "resp",
  "mkDataCacheBlocking:stage"    => "stage",
  "mkDataCacheBlocking:hitMiss"  => "hit/miss",

  "mkMemArb:req0"                => "req0",
  "mkMemArb:req1"                => "req1",
  "mkMemArb:resp"                => "req2",

);


#--------------------------------------------------------------------
# Trace String
#--------------------------------------------------------------------

# For the processor we display the PC and what stage we are in.

$proc   = "pc={mkProc:pc} [{mkProc:pcgen}|{mkProc:exec}|{mkProc:writeback}]";
$procl  = "{mkProc:pc} [{mkProc:pcgen}{mkProc:exec}{mkProc:writeback}]";

# For the caches we display the current request and response,
# the current cache stage, whether or not the access is a hit or a miss.

$icache = "[{mkInstCacheBlocking:reqTiny}|{mkInstCacheBlocking:respTiny}|".
           "{mkInstCacheBlocking:stage}|{mkInstCacheBlocking:hitMiss}]";

$dcache = "[{mkDataCacheBlocking:reqTiny}|{mkDataCacheBlocking:respTiny}|".
           "{mkDataCacheBlocking:stage}|{mkDataCacheBlocking:hitMiss}]";

# For the memory arbiter we display the two requests from the 
# instruction and data caches and the response (which might be 
# going to either cache)

$marb   = "[{mkMemArb:req0}|{mkMemArb:req1}|{mkMemArb:resp}]";

# The trace string is used by bsv-trace.pl to for one line trace 
# output. Basically the current value for a given tag is substituted
# into the trace string every cycle. If the tag is not present then
# the empty field is used form the %fields hash.

$traceString = "$proc  $icache  $dcache  $marb  {mkProc:exInstFull} ";
$labelString = "$procl $icache  $dcache  $marb  {mkProc:exInstFull} ";

